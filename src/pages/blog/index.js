import Head from 'next/head';
import axios from 'axios';
import { useEffect, useState } from 'react';
import Link from 'next/link';
import BlogCard from '@/components/blogCard';
import Loading from '@/components/loading';
import Button from '@/components/button';

const api = axios.create({
  baseURL: 'https://gorest.co.in/public/v2',
  headers: {
    Authorization: `Bearer 9ed7ccc4449cdc30bed4013cdd109fea24efd0f2231b3e6e6c790c56ccb6094c`,
  },
});

export default function Blog() {
  const [posts, setPosts] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const totalPage = 10;
  const pages = Array.from(Array(totalPage), (_, i) => i + 1);
  const [users, setUsers] = useState([]);
  const [comments, setComments] = useState([]);
  const [loading, setLoading] = useState(true);

  // https://gorest.co.in/public/v2/posts?page=1&per_page=10
  async function getData(value) {
    try {
      const response = await axios.get(`https://gorest.co.in/public/v2/posts`, {
        params: {
          page: value ? value : currentPage,
          per_page: 10,
        },
      });
      const responseUser = await axios.get(
        `https://gorest.co.in/public/v2/users`,
        {
          params: {
            page: value ? value : currentPage,
            per_page: 15,
          },
        }
      );
      const comments = await axios.get(
        `https://gorest.co.in/public/v2/comments`,
        {
          params: {
            page: value ? value : currentPage,
            per_page: 15,
          },
        }
      );

      setLoading(true);
      const result = response.data;
      const resultUser = responseUser.data;
      const resultComments = comments.data;
      setPosts(result);
      setUsers(resultUser);
      setComments(resultComments);
    } catch (error) {
      console.log(error);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    getData();
  }, [currentPage]);

  function nextPage() {
    setCurrentPage(currentPage + 1);
  }

  function previousPage() {
    setCurrentPage(currentPage - 1);
  }

  function goToPage(p) {
    setCurrentPage(p);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {loading ? (
        <div className="flex items-center justify-center h-screen">
          <Loading />
        </div>
      ) : (
        <main className="flex items-center justify-center pt-5">
          <div>
            <div className="flex items-center justify-center ">
              <ul className="flex flex-col space-y-4">
                {posts.map((post) => {
                  return (
                    <Link href={`/blog/${post.id}`} key={post.id}>
                      <li>
                        <BlogCard
                          title={post.title}
                          body={post.body}
                          users={users}
                          post={post}
                          comments={comments}
                        />
                      </li>
                    </Link>
                  );
                })}
              </ul>
            </div>

            <div className="space-x-1 py-4">
              <Button onClick={previousPage} disabled={currentPage === 1}>
                prev
              </Button>
              {pages.map((page) => (
                <Button
                  key={page}
                  onClick={() => goToPage(page)}
                  disabled={currentPage === page}
                >
                  {page}
                </Button>
              ))}
              <Button onClick={nextPage} disabled={currentPage === totalPage}>
                next
              </Button>
            </div>
          </div>
        </main>
      )}
    </>
  );
}
